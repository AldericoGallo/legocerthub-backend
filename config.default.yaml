# Bind Address and Ports for API Server
# If address is blank, server will bind to all available addresses
# Https will start if there is a valid private_key and certificate
# pair specified below. If not, http starts.
# WARNING: You should obtain a valid certificate immediately to avoid loss
# of data confidentiality.
# Additionally, key and certificate downloads via the API key will be disabled
# if the server is running as http.
bind_address: ''
https_port: 4055
http_port: 4050

# enable http redirect - if this is enabled, when server is running
# https it will also start a server on the http port that will redirect
# the client to https
enable_http_redirect: true

# Server logging level (valid levels are: debug, info, warn, error, dpanic,
# panic, and fatal)
log_level: 'info'

# Should the server also host the frontend?
serve_frontend: true

# CORS permitted origins
# Only needed if the frontend is hosted somewhere other than the backend api server
# (i.e. at /app). Each entry should be a protocol + hostname or address + port 
# (e.g. https://localhost:5353 or http://192.168.1.1:5050)
# In most cases, this should not be used.
cors_permitted_origins: []

# API Server's key and cert
# These names should match the 'name' field of the desired key and cert within
# the application.
# If not specified (or invalid), a self-signed cert is created on each launch
# until proper values are specified.
private_key_name: legocerthub
certificate_name: legocerthub

# Development mode
# This should NOT be used in production!
dev_mode: false

# Orders configuration
orders:
  # settings for automatic ordering
  auto_order_enable: true
  # order certs with less than this number of days remaining of validity
  valid_remaining_days_threshold: 40
  # time for the daily ordering to occur
  refresh_time_hour: 3
  refresh_time_minute: 12

# Challenge Providers
challenges:
  dns_checker:
    # specifying skip check wait disables dns record validation and instead
    # sleeps for the specified number of seconds and then assumes the record
    # is fully propagated
    skip_check_wait_seconds: null
    # services to use if checker is not disabled
    dns_services:
      # generally you do NOT want these to be internal dns servers
      # internal dns usually has long cache and doesn't truly check propagation
      # if you don't want external dns checking, use skip_check above
      - primary_ip: 1.1.1.1
        secondary_ip: 1.0.0.1
      - primary_ip: 9.9.9.9
        secondary_ip: 149.112.112.112
      - primary_ip: 8.8.8.8
        secondary_ip: 8.8.4.4
  providers:
    # http-01 internal server
    http_01_internal:
      enable: true
      # port to run the http challenge server on
      port: 4060
    # dns-01 using scripts that are external to LeGo
    dns_01_manual:
      enable: false
      create_script: ./scripts/create-dns.sh
      delete_script: ./scripts/delete-dns.sh
    # dns-01 via LeGo Cloudflare integration
    dns_01_cloudflare:
      enable: false
      accounts:
        - email: user@example.com
          global_api_key: 12345abcde
      tokens:
        - api_token: 123abc
          zone_names:
            - example.com
            - example1.com
            - example2.com
        - api_token: 345def
          zone_names:
            - example4.com
